#!/bin/bash

#  ---------------------------------------------------------------------------
#  https://github.com/marc31/.commonrc
#
#  Description:  This file holds is source both by .bashrc and .zshrc
#                I use it for commun things
#
#  Sections:
#  1.  Environment Configuration
#  2.  Make Terminal Better (remapping defaults and adding functionality)
#  3.  MacOS interaction
#  4.  File and Folder Management
#  6.  Searching
#  7.  Process Management
#  8.  Networking
#  9.  System Operations & Information
#  10. Web Development
#  11. Function
#  12. Reminders & Notes & Exemple
#  ---------------------------------------------------------------------------

#   -------------------------------
#   1. ENVIRONMENT CONFIGURATION
#   -------------------------------
MKPATH="$MKPATH:$HOME/Documents/web/script/freshdrup"
MKPATH="$MKPATH:/Applications/MAMP/Library/bin"
MKPATH="$MKPATH:$HOME/.composer/vendor/bin"
MKPATH="$MKPATH:/Applications/MAMP/bin/php/php5.6.32/bin"
MKPATH="$MKPATH:$HOME/.yarn/bin"
MKPATH="$MKPATH:/Library/Frameworks/Python.framework/Versions/2.7/bin"
MKPATH="$MKPATH:$HOME/.SpaceVim/bin"
MKPATH="$MKPATH:/Applications/MacVim.app/Contents/bin"
MKPATH="$MKPATH:/usr/local/bin/:/usr/local/sbin/"
MKPATH="$MKPATH:$PATH"
PATH=$MKPATH
export PATH



#   Set Paths
#   ------------------------------------------------------------
export DEFAULT_USER=$(whoami)

#	Source private part
#   ------------------------------------------------------------
if [ -f "$HOME/.commonrc/.privaterc" ]; then source "$HOME/.commonrc/.privaterc"; fi

# 	Init shell var
#	------------------------------------------------------------
if [ -n "$ZSH_VERSION" ]; then
	# assume Zsh
	export NOWSHELL='zsh'
elif [ -n "$BASH_VERSION" ]; then
	export NOWSHELL='bash'
fi

# 	Add ItermIntegration
#	------------------------------------------------------------
test -e "${HOME}/.iterm2_shell_integration.${NOWSHELL}" && source "${HOME}/.iterm2_shell_integration.${NOWSHELL}"

# 	Google Cloud SDK.
#	------------------------------------------------------------
# The next line updates PATH for the Google Cloud SDK.
if [ -f "/Applications/google-cloud-sdk/path.${NOWSHELL}.inc" ]; then source "/Applications/google-cloud-sdk/path.${NOWSHELL}.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "/Applications/google-cloud-sdk/completion.${NOWSHELL}.inc" ]; then source "/Applications/google-cloud-sdk/completion.${NOWSHELL}.inc"; fi

# 	NVM
#	------------------------------------------------------------
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

#	Check if a program exist
function checkProgram() {
	command -v "$1" >/dev/null 2>&1
}

#   Set Default Editor (change 'Nano' to the editor of your choice)
#	Preferred editor for local and remote sessions
#   ------------------------------------------------------------
if [[ -n $SSH_CONNECTION ]]; then
	export EDITOR='vi'
else
	export EDITOR='vi'
fi

# NB : code is for Visual Studio Code for having this
# First do :
# - launch VS Code.
# - Now open the Command Palette (F1)
# - type shell command to find the Shell Command: Install 'code' command in PATH command.
if checkProgram 'code'; then
	export EDITORGUI='code'
else
	export EDITORGUI=$EDITOR
fi

#   Set default blocksize for ls, df, du
#   from this: http://hints.macworld.com/comment.php?mode=view&cid=24491
#   ------------------------------------------------------------
export BLOCKSIZE=1k

# 	colorize and formatting command line
# 	You need iTerm and activate 256 color mode in order to work
# 	http://kevin.colyar.net/wp-content/uploads/2011/01/Preferences.jpg
#	------------------------------------------------------------
green='\x1B[0;32m'
cyan='\x1B[1;36m'
blue='\x1B[0;34m'
grey='\x1B[1;30m'
red='\x1B[0;31m'
bold='\033[1m'
normal='\033[0m'

# Jump a line
function line() {
	echo " "
}

function say_blue() {
	echo -e "${blue}${bold}$1${normal}"
}

function say_red() {
	echo -e "${red}${bold}$1${normal}"
}

function say_green() {
	echo -e "${green}${bold}$1${normal}"
}

function say_grey() {
	echo -e "${grey}${bold}$1${normal}"
}

# 	Yes or No question
#	------------------------------------------------------------
function askYN() {
	say_green "${1}"
	say_green "o|O|y|Y ou n|N|*"
	read -r repdrop
	echo -e '\t'
	case "$repdrop" in
	o | O | y | Y)
		return 0
		;;
	n | N | *)
		say_red "Abandon"
		return 1
		;;
	esac
}

# 	Ask Something With Choice
# 		$1     : MESSAGE
# 		$2     : DEFAULT (AS INDEX IN $choices) IF USER PROVIDES AN EMPTY ANSWER
# 		$3-n   : CHOICES (WITH UNIQUE LEADING CHARACTER, E.G: "yes" "no" "abort")
# 		returns: 0, AND SETS $BOTASK_ANSWER TO THE ANSWER'S INDEX WITHIN $choices
#	-----------------------------------------------------------------------------
function ask_choice() {

	## EASE OUR DEVS' LIFE
	if ! [[ $2 =~ ^-?[0-9]+$ ]]; then
		say_red "'$2' IS NOT AN INTEGER"
		return 1
	fi

	local msg="$1"
	local def_choice=$2
	shift 2
	local choices=("$@")
	local prompt=""
	BOTASK_ANSWER="$def_choice" #XXX: ACCESS TO USER'S CHOICE

	if [ -n "$ZSH_VERSION" ]; then
		for c in "$@"; do
			if [[ "$c" == "${choices[$def_choice + 1]}" ]]; then
				prompt="${prompt}${blue}${bold}[${c:0:1}]${c:1}${normal} "
			else
				prompt="${prompt}[${c:0:1}]${c:1} "
			fi
		done
	elif [ -n "$BASH_VERSION" ]; then
		for c in "$@"; do
			if [[ "$c" == "${choices[$def_choice]}" ]]; then
				prompt="${prompt}${blue}${bold}[${c:0:1}]${c:1}${normal} "
			else
				prompt="${prompt}[${c:0:1}]${c:1} "
			fi
		done
	fi

	while true; do
		say_green "$msg"
		echo -ne "$prompt> "
		read -r ans

		if [ -n "$ZSH_VERSION" ]; then
			# assume Zsh
			for ((i = 1; i <= ${#choices[@]}; i++)); do
				test -z "${ans}" && return 0 #TDL: PRESSING SPACE (RETURN OK)
				c=${choices[$i]}
				if [[ "${ans}" == "${c:0:1}" ]]; then
					echo
					BOTASK_ANSWER=$((i - 1)) && return 0 #XXX: set -e SO RETURN 0
				fi
			done
		elif [ -n "$BASH_VERSION" ]; then
			for ((i = 0; i <= ${#choices[@]} - 1; i++)); do
				test -z "${ans}" && return 0 #TDL: PRESSING SPACE (RETURN OK)
				c=${choices[$i]}
				if [[ "${ans}" == "${c:0:1}" ]]; then
					echo
					BOTASK_ANSWER=$i && return 0 #XXX: set -e SO RETURN 0
				fi
			done
		fi

		say_red "Please choose a valid answer" ## USER MISTYPED: EMBARRASSMENT
	done
}

# 	check if provided folder name already exists
# 	no => create it
#	------------------------------------------------------------
function chkdir() {
	if [ ! -d "${1}" ]; then
		say_blue "Creation du répertoire ${1}"
		mkdir "$1"
	fi
}

# 	check file
# 	no => create it
#	------------------------------------------------------------
function chkfile() {
	if sudo [ ! -f /usr/lib/tmpfiles.d/lircd.conf ]; then
		say_blue "Creation du fichier ${1}"
		touch "$1"
	fi
}

#	Link your bashrc and profile to root
#	------------------------------------------------------------
function linkconftoroot() {
	ask_choice "Do you want I link your config file to the root user ?" 0 no yes
	# change to the home folder you want to link from
	cd "/home/$(logname)" || return 1

	# define a list of dot files to link
	dotfiles=".profile .bashrc .bash_aliases .bash_logout .zshrc .commonrc/.commonrc .commonrc/.privaterc .nanorc .toprc .inputrc "

	# link each existing file into the root user's home folder
	for i in $dotfiles; do
		[ -f "$i" ] && sudo ln -sfv ~+/"$i" ~root/
	done
}

#   -----------------------------
#   2. MAKE TERMINAL BETTER
#   -----------------------------

alias cp='cp -iv'       # Preferred 'cp' implementation v write file et i ask
alias mv='mv -iv'       # Preferred 'mv' implementation
alias mkdir='mkdir -pv' # Preferred 'mkdir' implementation S'assurer que  chaque  répertoire  indiqué  existe. Créer   les   répertoires  parents  manquants
alias ll="ls -FGlah"
alias path='echo -e ${PATH//:/\\n}'      # path:         Echo all executable Paths
alias DT='tee ~/Desktop/terminalOut.txt' # DT:           Pipe content to file on MacOS Desktop ex : ls | DT
alias DTview='cat ~/Desktop/terminalOut.txt'
alias editg='$EDITORGUI'
alias edit='$EDITOR'

mcd() { mkdir -p "$1" && cd "$1"; } # mcd:          Makes new Dir and jumps inside
cl() { cd "$@" && ll; }             # cd and list

alias h='history'             # Alias for history
hs() { history | grep "$*"; } # Grep in history

#   lr:  Full Recursive Directory Listing
#   ------------------------------------------
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.
#
#           Example: mans mplayer codec
#   --------------------------------------------------------------------
mans() {
	man "$1" | grep -iC2 --color=always "$2" | less
}

# 	cd:  Add historic for cd command
#      		Example : cd -- show history
#			  		  cd -3
# 	acd_func 1.0.5, 10-nov-2004
# 	petar marinov, http:/geocities.com/h2428, this is public domain
#   ------------------------------------------
cd_func() {
	local x2 adir the_new_dir index
	local -i cnt

	# If call like cd -- print history
	if [[ $1 == "--" ]]; then
		dirs -v
		return 0
	fi

	the_new_dir=$1

	# If call with cd without option go to home
	# -z mean empty char
	[[ -z $the_new_dir ]] && the_new_dir=$HOME

	# If call with cd -INT with INT a number
	# affect the_new_dir var to the dir
	if [[ ${the_new_dir:0:1} == '-' ]]; then
		# Extract dir N from dirs
		index=${the_new_dir:1}
		[[ -z $index ]] && index=1
		adir=$(dirs +$index)
		[[ -z $adir ]] && return 1
		the_new_dir=$adir
	fi

	# '~' has to be substituted by ${HOME}
	[[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

	# Now change to the new dir and add to the top of the stack
	pushd "${the_new_dir}" >/dev/null
	[[ $? -ne 0 ]] && return 1
	the_new_dir=$(pwd)

	# Trim down everything beyond 11th entry
	popd -n +11 2>/dev/null 1>/dev/null

	# Remove any other occurence of this dir, skipping the top of the stack
	for ((cnt = 1; cnt <= 10; cnt++)); do
		x2=$(dirs +${cnt} 2>/dev/null)
		[[ $? -ne 0 ]] && return 0
		[[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
		if [[ "${x2}" == "${the_new_dir}" ]]; then
			popd -n +$cnt 2>/dev/null 1>/dev/null
			cnt=$((cnt - 1))
		fi
	done

	echo "$the_new_dir"
	return 0
}

[[ -n "$BASH_VERSION" ]] && alias cd=cd_func
#   ------------------------------------------

#   -----------------------------
#   3. MacOS Interaction
#   -----------------------------

trash() { command mv "$@" ~/.Trash; }                  # trash:        Moves a file to the MacOS trash
ql() { qlmanage -p "$*" >&/dev/null; }                 # ql:           Opens any file in MacOS Quicklook Preview
spotlight() { mdfind "kMDItemDisplayName == '$*'wc"; } # Search for a file using MacOS Spotlight's metadata

#   -------------------------------
#   4. FILE AND FOLDER MANAGEMENT
#   -------------------------------

zipf() { zip -r "$1".zip "$1"; } # zipf:         To create a ZIP archive of a folder

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
extract() {
	if [ -f "$1" ]; then
		case $1 in
		*.tar.bz2) tar xjf "$1" ;;
		*.tar.gz) tar xzf "$1" ;;
		*.bz2) bunzip2 "$1" ;;
		*.rar) unrar e "$1" ;;
		*.gz) gunzip "$1" ;;
		*.tar) tar xf "$1" ;;
		*.tbz2) tar xjf "$1" ;;
		*.tgz) tar xzf "$1" ;;
		*.zip) unzip "$1" ;;
		*.Z) uncompress "$1" ;;
		*.7z) 7z x "$1" ;;
		*) echo "'$1' cannot be extracted via extract" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

#   cdf:  'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------
cdf() {
	currFolderPath=$(
		/usr/bin/osascript <<EOT
	            tell application "Finder"
	                try
	            set currFolder to (folder of the front window as alias)
	                on error
	            set currFolder to (path to desktop folder as alias)
	                end try
	                POSIX path of currFolder
	            end tell	
EOT
	)
	echo "cd to \"$currFolderPath\""
	cd "$currFolderPath" || return 1
}

#	Copy SD Card
#   ------------------------------------------------------
cpSD() {
	# 2015-11-28
	# DSK='disk4'
	# Find disk with LInux partition (works for Raspbian)
	DSK=$(diskutil list | grep "Linux" | cut -c 69-73)
	export DSK
	if [ "$DSK" ]; then
		askYN "La carte SD est bien sur le disk ${DSK}"
	else
		say_red "Disk not found"
		return 1
	fi
	diskutil unmountDisk "/dev/$DSK"
	say_blue "please wait - This takes some time"
	say_blue "Ctl+T to show progress!"
	time sudo dd if="/dev/r$DSK" bs=4m | gzip -9 >"${HOME}/Desktop/sd$(date +%Y%m%d).img.gz"
}

#   ---------------------------
#   5. SEARCHING
#   ---------------------------

alias qfind="find . -name "              # qfind:    Quickly search for file
ff() { /usr/bin/find . -name "$@"; }     # ff:       Find file under the current directory
ffs() { /usr/bin/find . -name "$*"'*'; } # ffs:      Find file whose name starts with a given string
ffe() { /usr/bin/find . -name '*'"$*"; } # ffe:      Find file whose name ends with a given string

# cf spotlight: Search for a file using MacOS Spotlight's metadata

#   ---------------------------
#   6. PROCESS MANAGEMENT
#   ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
findPid() {
	ps acx | grep -i "$1" | awk {'print $1'}
}

#   memHogsTop, memHogsPs:  Find memory hogs
#   -----------------------------------------------------
alias memHogsTop='top -l 1 -o rsize | head -20'
alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

#   cpuHogs:  Find CPU hogs
#   -----------------------------------------------------
alias cpuHogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
myPs() {
	ps "$@" -u "$USER" -o pid,%cpu,%mem,start,time,bsdtime,command
}

#   ---------------------------
#   7. NETWORKING
#   ---------------------------

alias myip='whoami ; echo -e \ - Public facing IP Address: ; curl ipecho.net/plain ; echo ; echo -e \ - Internal IP Address: ;  ipconfig getifaddr en0' # myip:         Public facing IP Address
alias netCons='lsof -i'                                                                                                                                 # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'                                                                                                                # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'                                                                                                                 # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'                                                                                                       # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'                                                                                                       # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'                                                                                                                  # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'                                                                                                                  # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'                                                                                                            # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                                                                                                                      # showBlocked:  All ipfw rules inc/ blocked IPs

#   ---------------------------------------
#   8. SYSTEMS OPERATIONS & INFORMATION
#   ---------------------------------------

# 	Python
#   -----------------------------------------------------------------------------------
alias py="/usr/local/bin/pythonw"

#   cleanupDS:  Recursively delete .DS_Store files
#   -------------------------------------------------------------------
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

#   finderShowHidden:   Show hidden files in Finder
#   finderHideHidden:   Hide hidden files in Finder
#   -------------------------------------------------------------------
alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

#   cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
#   -----------------------------------------------------------------------------------
alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

#   ---------------------------------------
#   9. WEB DEVELOPMENT
#   ---------------------------------------
hostsfile='/etc/hosts'
alias hosts='sudo ${EDITORGUI} ${hostsfile}'
alias hostsv='sudo ${EDITOR} ${hostsfile}'
vhostsfile='/Applications/MAMP/conf/apache/extra/httpd-vhosts.conf'
alias vhosts='sudo ${EDITORGUI} ${vhostsfile}'
alias vhostsv='sudo ${EDITOR} ${vhostsfile}'
vhostssslfile='/Applications/MAMP/conf/apache/extra/httpd-ssl.conf'
alias vhostsssl='sudo ${EDITORGUI} ${vhostssslfile}'

# httpHeaders:      Grabs headers from web page
httpHeaders() {
	/usr/bin/curl -I -L "$@"
}

#   httpDebug:  Download a web page and show info on what took time
#   -----------------------------------------------------------------------------------
httpDebug() {
	/usr/bin/curl "$@" -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\\n"
}

wwwdir=/Applications/MAMP/htdocs
alias cdroot='cd ${wwwdir}'
alias cdscript='cd ${HOME}/Documents/bricolage/web/script'
alias cdnote='cd ${HOME}/Documents/Nextcloud/Notes'

#	Apache
#   -----------------------------------------------------------------------------------
alias aptest="sudo /Applications/MAMP/Library/bin/apachectl configtest"
alias apstart="sudo /Applications/MAMP/Library/bin/apachectl start"
alias apstop="sudo /Applications/MAMP/Library/bin/apachectl stop"
alias aprestart="sudo /Applications/MAMP/Library/bin/apachectl restart"

#	Mysql
#   -----------------------------------------------------------------------------------
alias mysqlstop="/Applications/MAMP/Library/bin/mysqladmin -u root -proot --socket=/Applications/MAMP/tmp/mysql/mysql.sock shutdown"
alias mysqlstart="/Applications/MAMP/Library/bin/mysqld_safe --port=3306 --socket=/Applications/MAMP/tmp/mysql/mysql.sock --pid-file=/Applications/MAMP/tmp/mysql/mysql.pid --log-error=/Applications/MAMP/logs/mysql_error_log &"
alias mysqlcheck="/Applications/MAMP/Library/bin/mysqlcheck --all-databases --check --check-upgrade -u root -proot --socket=/Applications/MAMP/tmp/mysql/mysql.sock"
alias mysqlrepair="/Applications/MAMP/Library/bin/mysqlcheck --all-databases --repair -u root -proot --socket=/Applications/MAMP/tmp/mysql/mysql.sock"
alias mysqlrestart="mysqlstop ; mysqlstart"

#	MAMP LOG
#   -----------------------------------------------------------------------------------
export mamplog="/Applications/MAMP/logs & /Applications/MAMP/Library/logs"
export apachelog="/Applications/MAMP/logs/apache_error.log"
export mysqllog="/Applications/MAMP/logs/mysql_error_log.err"

# 	Start/stop mysql and apache
#   -----------------------------------------------------------------------------------
servstart() {
	apstart
	mysqlstart
	say_blue "When Server don't start apache say nothing"
	say_blue "See use servlog in teminal"
}
servstop() {
	apstop
	mysqlstop
	say_blue "When Server don't start apache say nothing"
	say_blue "See use servlog in teminal"
}
servrestart() {
	aprestart
	mysqlrestart
}

servlog() {
	tail -f ${apachelog} ${mysqllog}
}

# 	Start php serv
#   -----------------------------------------------------------------------------------
alias phps="php -S localhost:8085"

#   Drupal
#   -----------------------------------------------------------------------------------
alias drupalcs="phpcs --colors --standard=Drupal --extensions='php,module,inc,install,test,profile,theme,js,css,info,txt'"
alias drupalcsbest="phpcs --colors --standard=DrupalPractice --extensions='php,module,inc,install,test,profile,theme,js,css,info,txt'"
alias drupalcsfix="phpcbf --colors --standard=Drupal --extensions='php,module,inc,install,test,profile,theme,js,css,info,txt'"
alias drupalcsbestfix="phpcbf --colors --standard=DrupalPractice --extensions='php,module,inc,install,test,profile,theme,js,css,info,txt'"

alias imexdb="~/Documents/bricolage/web/script/drupal/./im_ex" # Export Db drupal

alias chromefix="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome --disable-web-security --user-data-dir=/Users/narcozy/tmp"
alias chrome="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"

alias druppy="/Users/narcozy/Documents/bricolage/web/script/drupal/./druppy"



# Make a github repo
# replace USER and REPO with real values
# but *not* the "/user/" in the GitHub URL
function makeGitHub() {
	gituser=marc31
	repo=''
	remotename='origin'

	while [ -z "$repo" ] && say_green "What is the repo name ?" && read -r repo && [ -z "$repo" ]; do
		say_red "No-no, please, no blank repo name!"
	done

	# Check if repo exist
	if (git ls-remote "https://github.com/$gituser/$repo" -q); then
		say_red "Le repo $repo existe sur gitHub"
		return 1
	fi

	# Check if the actual dir have a .git dir
	if [ ! -d ".git" ]; then
		say_red "Git n'est pas initialisé dans le repertoire actuel"
		say_blue "Initialise le dépot"
		git init
	fi

	say_blue "Créer le dépot sur github"
	curl -u $gituser https://api.github.com/user/repos -d "{\"name\":\"$repo\"}"

	if ( git remote -v | grep $remotename -q); then
		
		say_red "La branche origin existe deja"

		while [ -z "$remotename" ] && say_green "What is the remote name?" && read -r remotename && [ -z "$remotename" ]; do
			say_red "No-no, please, no blank repo name!"
		done
	fi
	say_blue "Ajoute github comme remote avec le nom : $remotename"
	git remote add $remotename https://github.com/$gituser/"$repo".git
	say_blue "Il ne vous reste plus qu'à add, commit, push"
}

#   -------------------------------
#   10. EDITING FILES
#   -------------------------------
alias commonrc='source ${HOME}/.commonrc/.commonrc'
alias commonrcm='${EDITORGUI} ${HOME}/.commonrc/.commonrc'
alias privatercm='${EDITORGUI} ${HOME}/.commonrc/.privaterc'
alias bashrc='source ${HOME}/.bashrc'
alias bashrcm='${EDITORGUI} ${HOME}/.bashrc'
alias zshrc='source ${HOME}/.zshrc'
alias zshrcm='${EDITORGUI} ${HOME}/.zshrc'

#   -------------------------------
#   11. Function
#   -------------------------------

# 	Check if file finish with a newline
#   -----------------------------------------------------------------------------------
function file_ends_with_newline() {
	[[ $(tail -c1 "$1" | wc -l) -gt 0 ]]
}

# 	Generate a random password
#  		$1 = number of characters; defaults to 32
# 		remove LC_CTYPE in linux this is for mac
# 		you can remplace $CHAR by "a-zA-Z0-9-_\$\?\@\.\!"
#   -----------------------------------------------------------------------------------
function randpass() {
	env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\\$\\?\\@\\.\\!" </dev/urandom | head -c "${1:-32}"
}

#	GENERATE SSH KEY
#   -----------------------------------------------------------------------------------
function sshKeyGen() {

	local server=''
	local serverport=''
	local userlogin=''
	local keyname=''
	local keytype=''
	local keystrength=''

	while [ -z "$keyname" ] && say_green "What is the key name ?" && read -r keyname && [ -z "$keyname" ]; do
		say_red "No-no, please, no blank user!"
	done

	read -r -d '' text <<"EOF"
\t- RSA is well-regarded and supported everywhere. It is considered quite secure.
Common key sizes go up to 4096 bits and as low as 1024. The key size is adjustable.
You should choose RSA.
\t- DSA is not in common use anymore, as poor randomness when generating a signature
can leak the private key. In the past, it was guaranteed to work everywhere as per RFC 4251,
but this is no longer the case. DSA has been standardized as being only 1024 bits
(in FIPS 186-2, though FIPS 186-3 has increased that limit). OpenSSH 7.0 and newer
actually disable this algorithm.
\t- ECDSA is newer and is based on DSA. It has the same weaknesses as DSA, but it is generally
thought to be more secure, even at smaller key sizes. It uses the NIST curves (P256).
Ed25519, while not one you listed, is available on newer OpenSSH installations. It is similar
to ECDSA but uses a superior curve, and it does not have the same weaknesses when weak RNGs
are used as DSA/ECDSA. It is generally considered to be the strongest mathematically.
Source : forest https://security.stackexchange.com/questions/178958
EOF
	ask_choice "Do you want to put it in a server ?" 0 rsa dsa ecdsa ed25519
	say_grey "$text"
	if [[ $BOTASK_ANSWER == 0 ]]; then
		keytype='rsa'
	elif [[ $BOTASK_ANSWER == 1 ]]; then
		keytype='dsa'
	elif [[ $BOTASK_ANSWER == 2 ]]; then
		keytype='ecdsa'
	elif [[ $BOTASK_ANSWER == 3 ]]; then
		keytype='ed25519'
	fi

	if ! [ -z "$keystrength" ] && [[ $keystrength =~ ^[0-9]+$ ]]; then
		# Generate
		ssh-keygen -t $keytype -b $keystrength -f "$HOME/.ssh/${keytype}_$keyname"
	else
		say_green "What key strength do you want ? (let's default value from open ssh)"
		read -r keystrength

		if ! [ -z "$keystrength" ] && [[ $keystrength =~ ^[0-9]+$ ]]; then
			# Generate
			ssh-keygen -t $keytype -b "$keystrength" -f "$HOME/.ssh/${keytype}_$keyname"
		else
			# Generate without strenght
			ssh-keygen -t $keytype -f "$HOME/.ssh/${keytype}_$keyname"
		fi
	fi

	# Add it to the agent
	ask_choice "Do you want to add the key to agent ?" 1 no yes
	if [[ $BOTASK_ANSWER == 1 ]]; then
		ssh-add -K "${HOME}/.ssh/${keytype}_$keyname"
	fi

	ask_choice "Do you want to copy the key to clipboard ?" 0 no yes
	if [[ $BOTASK_ANSWER == 1 ]]; then
		pbcopy <"${HOME}/.ssh/${keytype}_$keyname"
		say_blue "SSH Key copied in your clipboard"
	fi

	ask_choice "Do you want to put it in a server ?" 1 no yes
	if [[ $BOTASK_ANSWER == 1 ]]; then

		while [ -z "$userlogin" ] && say_green "What is the user login ?" && read -r userlogin && [ -z "$userlogin" ]; do
			say_red "No-no, please, no blank user!"
		done

		while [ -z "$server" ] && say_green "What is the url/ip of the server ?" && read -r server && [ -z "$server" ]; do
			say_red "No-no, please, no blank server!"
		done

		while [ -z "$serverport" ] && say_green "What is the port of the server (default 22) ?" && read -r serverport && [ -z "$serverport" ]; do
			say_red "No-no, please, no blank server!"
		done

		# Add it to config file for mac os instead it ask for password every reboot
		ask_choice "Do you want to add the key to ~/.ssh/config ?" 1 no yes
		if [[ $BOTASK_ANSWER == 1 ]]; then
			printf '\n' | tee -a "${HOME}/.ssh/config"
			echo "Host $server" | tee -a "${HOME}/.ssh/config"
			echo -e "\\t IdentityFile ${HOME}/.ssh/${keytype}_$keyname" | tee -a "${HOME}/.ssh/config"
		fi

		# Copy it to the server
		ssh-copy-id -f -p "$serverport" -i "${HOME}/.ssh/${keytype}_$keyname.pub" "$userlogin@$server"
	fi

	ask_choice "Do you want to hash your known_hosts file ? " 0 no yes
	if [[ $BOTASK_ANSWER == 1 ]]; then
		ssh-keygen -H -f "${HOME}/.ssh/known_hosts"
		rm "${HOME}/.ssh/known_hosts.old"
	fi

}

#	CREATE VHOST with ssl
#	--------------------------------------------------------------------------------------
function addVhostSsl() {

	if [ "$1" ]; then
		url="$1"
	else
		url=exemple
	fi

	if [ "$2" ]; then
		keyname="$2"
	else
		keyname=server
	fi

	if [ "$3" ]; then
		pathtoinstall="$3"
	else
		pathtoinstall="$HOME"
	fi

	url0="${1}.local"

	if ! file_ends_with_newline ${vhostssslfile}; then
		printf '\n' >>${vhostssslfile}
	fi
	if grep -Fxq "  ServerName ${url0}" ${vhostssslfile}; then
		say_red "L'entrée ${url0} existe déjà$ dans ${vhostssslfile}."
	else
		echo " " | sudo tee -a ${vhostssslfile}
		echo "<VirtualHost *:443>" | sudo tee -a ${vhostssslfile}
		echo "  ServerName $url0" | sudo tee -a ${vhostssslfile}
		echo '  DocumentRoot "'"${pathtoinstall}/${url}"'"' | sudo tee -a ${vhostssslfile}
		echo '  ErrorLog  "'"${wwwdir}/${url}/logs/errors.log"'"' | sudo tee -a ${vhostssslfile}
		echo '  CustomLog  "'"${wwwdir}/${url}/logs/access.log"'" common' | sudo tee -a ${vhostssslfile}
		echo '  SSLEngine on'
		echo '  SSLCertificateFile "'"/Applications/MAMP/conf/apache/${keyname}.crt"'"'
		echo '  SSLCertificateKeyFile "'"/Applications/MAMP/conf/apache/${keyname}.key"'"'
		echo '  RewriteEngine On' | sudo tee -a ${vhostssslfile}
		echo '  <Directory "'"${wwwdir}/${url}"'">' | sudo tee -a ${vhostssslfile}
		echo '    AllowOverride All' | sudo tee -a ${vhostssslfile}
		echo '    Options Indexes FollowSymLinks' | sudo tee -a ${vhostssslfile}
		echo '  </Directory>' | sudo tee -a ${vhostssslfile}
		echo "</VirtualHost>" | sudo tee -a ${vhostssslfile}
		say_blue "J'ai crée une entrée dans le fichier ${vhostssslfile}"
	fi
}

#   GENERATE MAMP SSL
#   ----------------------------------------------------------------------------------
function mampSSL() {

	say_blue "use instead https://github.com/loganstellway/self-signed-ssl.git"
	say_blue "/Users/narcozy/Documents/bricolage/web/script/ssl_auto_signed/self-signed-ssl/self-signed-tls"

	# if [ $1 ]; then
	# 	url=$1
	# else
	# 	url=exemple
	# fi

	# if [ $2 ]; then
	# 	keyname=${2}
	# else
	# 	keyname=server
	# fi

	# cd ~

	# # generate a private key (will request a password twice)
	# say_blue 'generate a private key (will request a password twice)'
	# openssl genrsa -des3 -out ${keyname}.key 2048

	# # generate certificate signing request (same password as above)
	# say_blue 'generate certificate signing request (same password as above)'
	# openssl req -sha256 -new -key ${keyname}.key -out ${keyname}.csr -config <(
	# cat << EOF
	# [req]
	# default_bits = 2048
	# prompt = no
	# default_md = sha256
	# req_extensions = v3_req
	# distinguished_name = dn

	# [dn]
	# C = FR
	# ST = Finisteres
	# L = Brestville
	# O = Ginkgo
	# OU = Development
	# emailAddress = contact@${url}.local
	# CN = ${url}.local

	# [v3_req]
	# authorityKeyIdentifier = keyid,issuer
	# basicConstraints = CA:FALSE
	# keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
	# subjectAltName = @alt_names

	# [ alt_names ]
	# DNS.1 = ${url}.local
	# DNS.2 = www.${url}.local
	# EOF
	# )

	# # generate the certificate
	# say_blue 'generate the certificate'
	# openssl x509 -req -days 365 -in ${keyname}.csr -signkey ${keyname}.key -out ${keyname}.crt

	# # remove the password from the server key
	# say_blue 'remove the password from the server key'
	# cp ${keyname}.key ${keyname}.tmp
	# openssl rsa -in ${keyname}.tmp -out ${keyname}.key

	# # Move the certificate into your MAMP apache configuration folder
	# say_blue 'Move the certificate into your MAMP apache configuration folder'
	# mv ${keyname}.crt /Applications/MAMP/conf/apache
	# mv ${keyname}.key /Applications/MAMP/conf/apache

	# say_blue 'Add to httpd-ssl'
	# addVhostSsl ${url} ${keyname}

	# say_blue 'Restart serv'
	# servrestart
}

#   ---------------------------------------
#   12. REMINDERS & NOTES
#   ---------------------------------------

#   remove_disk: spin down unneeded disk
#   ---------------------------------------
#   diskutil eject /dev/disk1s3

#   mounting a removable drive (of type msdos or hfs)
#   ---------------------------------------
#   mkdir /Volumes/Foo
#   ls /dev/disk*   to find out the device to use in the mount command)
#   mount -t msdos /dev/disk1s1 /Volumes/Foo
#   mount -t hfs /dev/disk1s1 /Volumes/Foo

#   Write in file if doesn't exist with sudo right
#   -------------------------
#   if sudo [ ! -f /usr/lib/tmpfiles.d/lircd.conf ]; then
#     sudo bash -c 'cat > /usr/lib/tmpfiles.d/lircd.conf' <<EOF
#     d /var/run/lirc 0755 root root
#   EOF
#   fi

#   Check char in a file and remove it if exist
#   -------------------------
#   if ! grep -Fxq 'MY_CHAR' MY_FILE; then
#		echo 'Dont Exist; add it'
#		sudo echo 'MY_CHAR' >> MY_FILE
#	else
#		echo 'Exist; Remove It'
#		# remove line
#		grep -Fv 'MY_CHAR' MY_FILE > delete.me
#		sudo mv -f delete.me MY_FILE
#	fi

#   Remove every file Or specific file in dir, sub, subdir
#   -----------------------------
#   find . -iname '*.bak' -type f -delete
#   -iname Case sensitive for insensitive use -iname
#   for test remove -delete
#   for all file '*.*'
#    you can try find -iregex '.*\.\(jpg\|gif\|png\|jpeg\)$'
# 	find . -name '.AppleDouble' -type d -print -exec rm -rv {} +

# 	The script will terminate after the first line that fails (returns nonzero exit code)
# 	-----------------------------
# 	set -e
# 	cut on error
#	if [[ $? -ne 0 ]] ; then
#		exit 1
#	fi
#
#	https://stackoverflow.com/questions/1378274/in-a-bash-script-how-can-i-exit-the-entire-script-if-a-certain-condition-occurs
# 	yell() { echo "$0: $*" >&2; }
# 	die() { yell "$*"; exit 111; }
# 	try() { "$@" || die "cannot $*"; }

# 	Get path of this file
# 	--------------------------
# 	path_of_this_file=`dirname "$0"`
# 	path_of_this_file=`( cd "${path_of_this_file}" && pwd )`

# 	Copy to clipboard
#	https://serverfault.com/questions/72476
#	Dennis Williamson and Wilfred Hughes
#   -------------------------
# 	Putting quotes around the sentinel (EOF) prevents the text from undergoing parameter expansion.
#	The -d'' causes it to read multiple lines (ignore newlines).
#	read -d '' String <<"EOF"
#	my test
#	EOF

#	Note function from oh-my-zsh
#	---------------------------------
#	Git hub
# 	* `empty_gh` - Creates a new empty repo (with a `README.md`) and pushes it to GitHub
#	* `new_gh` - Initializes an existing directory as a repo and pushes it to GitHub
#	* `exist_gh` - Takes an existing repo and pushes it to GitHub
#	* `git.io` - Shortens a URL using [git.io](http://git.io)

#   Write path to beggin of each line in a file
#   ---------------------------------
#   sed -i'' -e "s|^|$path|" update.txt